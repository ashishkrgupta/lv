{"version":3,"sources":["App.js","serviceWorker.js","index.js","App.module.css"],"names":["App","state","invoice","items","total","date","Date","customerName","address","aadhar","pan","item","description","unit","quantity","rate","price","units","addItem","push","setState","this","forEach","i","Card","CardHeader","style","textAlign","height","action","trigger","IconButton","content","componentRef","title","titleTypographyProps","variant","CardContent","className","classes","container","id","ref","el","Grid","direction","justify","spacing","alignItems","xs","Typography","fontSize","utils","DateFnsUtils","DatePicker","disableFuture","autoOk","format","views","value","onChange","TextField","e","target","label","FormControl","InputLabel","Select","map","name","MenuItem","key","Button","onClick","color","TableContainer","Table","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","index","splice","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.0717b360.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport PrintIcon from '@material-ui/icons/Print';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport ReactToPrint from \"react-to-print\";\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider, \n  DatePicker\n} from '@material-ui/pickers';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport classes from \"./App.module.css\"\n\nexport default class App extends Component {\n\n  state = {\n    invoice: {\n      items: [],\n      total: 0.0,\n      date: new Date(),\n      customerName:\"\",\n      address:\"\",\n      aadhar:\"\",\n      pan:\"\"\n    },\n    item:{\n      description:\"\",\n      unit:\"\",\n      quantity:0,\n      rate:0.0,\n      price:0.0,\n    },\n    units: [\"Mts\", \"Pc\"],\n    //particulars: [\"Admission Fee\",\"Annual Fee\",\"Tution Fee\",\"Library Fee\", \"Games Fee\", \"Computer Fee\", \"Others Fee\", \"Exam Fee\", \"Transport Fee\", \"Late Fee\"],\n    \n  };\n\n  addItem = () => {\n    let invoice = {...this.state.invoice};\n    let item = {...this.state.item};\n    item.price = item.rate * item.quantity;\n    invoice.items.push({...item});\n    item.description = \"\";\n    item.price = 0;\n    item.quantity = 0;\n    item.rate = 0;\n    this.setState({invoice, item});\n  }\n\n\n  render() {\n    let total = 0;\n    this.state.invoice.items.forEach(i => { total += i.price});\n    return (<Card >\n      <CardHeader\n        style={{textAlign:\"center\", height:\"25px\"}}\n        action={\n          <ReactToPrint\n           trigger = { () => <IconButton>\n            <PrintIcon />\n          </IconButton>}\n          content={() => this.componentRef}\n          />\n        }\n        title = \"Tax Invoice\" \n        titleTypographyProps = {{variant: \"h5\"}}\n        >\n      </CardHeader>\n      <CardContent>\n        <Card className={classes.container} \n            id=\"toBePrinted\" ref={el => (this.componentRef = el)}>\n          <CardContent>\n            <Grid container direction=\"row\" justify=\"flex-start\" spacing={1} alignItems=\"center\">\n              <Grid item xs={12}>\n                <Typography style={{textAlign:\"center\", fontSize:\"10px\"}}>TAX INVOICE</Typography>\n                <Typography style={{textAlign:\"center\", fontSize:\"24px\"}}>LAXMI VASTRALAYA</Typography>\n                <Typography style={{textAlign:\"center\"}}>Chowk Kasimabad, Ghazipur</Typography>\n                <Typography style={{textAlign:\"center\"}}>GSTIN: 09APYPG4485J1Z0</Typography>\n              </Grid>\n              <Grid item xs={9}> </Grid>\n              <Grid item xs={3}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <DatePicker\n                    className=\"width100percent\"\n                    disableFuture\n                    autoOk\n                    variant=\"inline\"\n                    format=\"dd/MM/yyyy\"\n                    views={[\"year\", \"month\", \"date\"]}\n                    value={this.state.invoice.date }\n                    onChange={date => {\n                      let invoice = {...this.state.invoice};\n                      invoice.date = date;\n                      this.setState({invoice});\n                    }}\n                  />\n                  </MuiPickersUtilsProvider>\n              </Grid>\n              <Grid item xs={2}>\n                <Typography>Name</Typography>\n              </Grid>\n              <Grid item xs={10}>\n                <TextField className=\"width100percent\" \n                  value={this.state.invoice.customerName}\n                  onChange={e => {\n                    let invoice = {...this.state.invoice};\n                    invoice.customerName = e.target.value;\n                    this.setState({invoice});\n                  } }\n                  />\n              </Grid>\n              <Grid item xs={2}>\n                <Typography>Address</Typography>\n              </Grid>\n              <Grid item xs={10}>\n                <TextField className=\"width100percent\" \n                  value={this.state.invoice.address}\n                  onChange={e => {\n                    let invoice = {...this.state.invoice};\n                    invoice.address = e.target.value;\n                    this.setState({invoice});\n                  } }\n                  />\n              </Grid>\n              <Grid item xs={2}>\n                <Typography>Aadhan No</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <TextField className=\"width100percent\" \n                  value={this.state.invoice.aadhar}\n                  onChange={e => {\n                    let invoice = {...this.state.invoice};\n                    invoice.aadhar = e.target.value;\n                    this.setState({invoice});\n                  } }\n                  />\n              </Grid>\n              <Grid item xs={2}>\n                <Typography>PAN No</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <TextField className=\"width100percent\" \n                  value={this.state.invoice.pan}\n                  onChange={e => {\n                    let invoice = {...this.state.invoice};\n                    invoice.pan = e.target.value;\n                    this.setState({invoice});\n                  } }\n                  />\n              </Grid>\n\n              {/* row */}\n              <Grid item xs={5}>\n                <TextField className=\"width100percent\" label=\"Item Description\" \n                  value={this.state.item.description}\n                  onChange={e => {\n                    let item = {...this.state.item};\n                    item.description = e.target.value;\n                    this.setState({item});\n                    }}/>\n              </Grid>   \n              <Grid item xs={2}>\n                <FormControl className={ \"width100percent \" }>\n                  <InputLabel id=\"language-label\">Unit</InputLabel>\n                  <Select\n                    value={this.state.item.unit}\n                    onChange={e => {\n                      let item = {...this.state.item};\n                      item.unit = e.target.value;\n                      this.setState({item});\n                    }}\n                  >\n                    {this.state.units.map(name => ( <MenuItem key={name.id} value={name}> {name} </MenuItem> ))}\n                  </Select>\n                </FormControl>\n              </Grid> \n              <Grid item xs={2}>\n                <TextField className=\"width100percent\" label=\"Quantity\" \n                  value={this.state.item.quantity}\n                  onChange={e => {\n                    let item = {...this.state.item};\n                    item.quantity = e.target.value;\n                    this.setState({item});\n                    }}/>\n              </Grid>\n              <Grid item xs={2}>\n                <TextField className=\"width100percent\" label=\"Rate\" \n                  value={this.state.item.rate}\n                  onChange={e => {let item = {...this.state.item};\n                  item.rate = e.target.value;\n                  this.setState({item});\n                  }}/>\n              </Grid>\n              <Grid item xs={1}>\n                <Button className=\"width100percent\" variant=\"contained\" onClick={this.addItem} color=\"primary\">Add</Button>\n              </Grid>\n              {/* row */}\n              <Grid item xs={12}>\n                <TableContainer>\n                  <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell align=\"center\">Sr No</TableCell>\n                        <TableCell align=\"left\">Description</TableCell>\n                        <TableCell align=\"center\">SHN Code</TableCell>\n                        <TableCell align=\"center\">QTY</TableCell>\n                        <TableCell align=\"center\">Rate</TableCell>\n                        <TableCell align=\"center\">Price</TableCell>\n                        <TableCell align=\"center\"></TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {this.state.invoice.items.map((item, index) => (\n                        <TableRow key={index}>\n                          <TableCell align=\"center\">{index + 1}</TableCell>\n                          <TableCell align=\"left\">{item.description}</TableCell>\n                          <TableCell align=\"center\"></TableCell>\n                          <TableCell align=\"center\">{item.quantity + \" \" + item.unit}</TableCell>\n                          <TableCell align=\"center\">{item.rate}</TableCell>\n                          <TableCell align=\"center\">{item.price}</TableCell>\n                          <TableCell align=\"center\"><DeleteIcon onClick={ () =>\n                            {\n                              let invoice = {...this.state.invoice};\n                              invoice.items.splice(index, 1);\n                              this.setState({invoice})\n                            }\n                          }/></TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Grid>\n              <Grid item xs={8}> </Grid>\n              <Grid item xs={2}> <Typography>Total</Typography> </Grid>\n              <Grid item xs={2}> {\n                total\n              } </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n\n        \n      </CardContent>\n    </Card>);\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"App-logo\":\"App_App-logo__25k4o\",\"App-logo-spin\":\"App_App-logo-spin__1e7sv\",\"App-header\":\"App_App-header__xLkWl\",\"App-link\":\"App_App-link__3FsH9\"};"],"sourceRoot":""}