{"version":3,"sources":["App.js","serviceWorker.js","index.js","App.module.css"],"names":["App","state","invoice","items","total","date","Date","particulars","addItem","push","description","currentParticular","rate","price","currentPrice","setState","this","forEach","i","Card","CardHeader","style","textAlign","height","action","trigger","IconButton","content","componentRef","title","titleTypographyProps","variant","CardContent","className","classes","container","id","ref","el","Grid","direction","justify","spacing","alignItems","item","xs","Typography","fontSize","utils","DateFnsUtils","disableFuture","autoOk","format","views","value","onChange","Autocomplete","options","width","inputValue","e","val","renderInput","params","TextField","label","DatePicker","from","to","parseFloat","target","Button","onClick","color","TableContainer","Table","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","index","key","splice","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4ab73851.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport PrintIcon from '@material-ui/icons/Print';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport ReactToPrint from \"react-to-print\";\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider, \n  KeyboardDatePicker,\n  DatePicker\n} from '@material-ui/pickers';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\n\nimport classes from \"./App.module.css\"\n\nexport default class App extends Component {\n\n  state = {\n    invoice: {\n      items: [],\n      total: 500.0,\n      date: new Date(),\n    },\n    particulars: [\"Admission Fee\",\"Annual Fee\",\"Tution Fee\",\"Library Fee\", \"Games Fee\", \"Computer Fee\", \"Others Fee\", \"Exam Fee\", \"Transport Fee\", \"Late Fee\"],\n    \n  };\n\n  addItem = () => {\n    let invoice = {...this.state.invoice};\n    invoice.items.push({description:this.state.currentParticular, rate:500.00, price:this.state.currentPrice});\n    this.setState({invoice, currentParticular:\"\", currentPrice:0});\n  }\n\n\n  render() {\n    let total = 0;\n    this.state.invoice.items.forEach(i => { total += i.price});\n    return (<Card >\n      <CardHeader\n        style={{textAlign:\"center\", height:\"25px\"}}\n        action={\n          <ReactToPrint\n           trigger = { () => <IconButton>\n            <PrintIcon />\n          </IconButton>}\n          content={() => this.componentRef}\n          />\n        }\n        title = \"Fee Receipt\" \n        titleTypographyProps = {{variant: \"h5\"}}\n        >\n      </CardHeader>\n      <CardContent>\n        <Card className={classes.container} \n            id=\"toBePrinted\" ref={el => (this.componentRef = el)}>\n          <CardContent>\n            <Grid container direction=\"row\" justify=\"flex-start\" spacing={1} alignItems=\"center\">\n              <Grid item xs={12}>\n                <Typography style={{textAlign:\"center\", fontSize:\"24px\"}}>GURUKUL SHIKSHAN SANSTHAN</Typography>\n                <Typography style={{textAlign:\"center\"}}>(Robertsganj, Mirzapur, UP. ESTD: 2020)</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography>Student Name</Typography>\n              </Grid>\n              <Grid item xs={8}>\n                <Typography>Ashish</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography>Class</Typography>\n              </Grid>\n              <Grid item xs={8}>\n                <Typography>Class 2</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography>Payment Date</Typography>\n              </Grid>\n              <Grid item xs={8}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <KeyboardDatePicker\n                    className=\"width100percent\"\n                    disableFuture\n                    autoOk\n                    variant=\"inline\"\n                    format=\"dd/MM/yyyy\"\n                    views={[\"year\", \"month\", \"date\"]}\n                    value={this.state.invoice.date }\n                    onChange={date => {\n                      let invoice = {...this.state.invoice};\n                      invoice.date = date;\n                      this.setState({invoice});\n                    }}\n                  />\n                  </MuiPickersUtilsProvider>\n              </Grid>\n              {/* row */}\n              <Grid item xs={4}>\n                <Autocomplete className=\"width100percent\"\n                  options={this.state.particulars}\n                  style={{ width: \"100%\" }}\n                  inputValue={this.state.currentParticular}\n                  onChange={(e, val) => {this.setState({currentParticular: val});}}\n                  renderInput={params => <TextField style={{ width: \"100%\" }} {...params} label=\"Particular\" />}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                { this.state.currentParticular === \"Tution Fee\" && <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <DatePicker\n                    //style={{width:\"50%\"}}\n                    label=\"From\"\n                    autoOk\n                    variant=\"inline\"\n                    format=\"MM/yyyy\"\n                    views={[\"month\"]}\n                    value={this.state.from }\n                    onChange={date => {\n                      this.setState({from: date});\n                    }}\n                  />\n                </MuiPickersUtilsProvider>}\n              </Grid>\n              <Grid item xs={2}>\n                { this.state.currentParticular === \"Tution Fee\" && <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <DatePicker\n                    //style={{width:\"50%\"}}\n                    label=\"To\"\n                    autoOk\n                    variant=\"inline\"\n                    format=\"MM/yyyy\"\n                    views={[\"month\"]}\n                    value={this.state.to }\n                    onChange={date => {\n                      this.setState({to: date});\n                    }}\n                  />\n                </MuiPickersUtilsProvider>}\n              </Grid>\n                \n                  \n              <Grid item xs={2}>\n                <TextField className=\"width100percent\" label=\"Price\" \n                  onChange={e => {this.setState({currentPrice: parseFloat(e.target.value)})}}/>\n              </Grid>\n              <Grid item xs={2}>\n                <Button className=\"width100percent\" variant=\"contained\" onClick={this.addItem} color=\"primary\">Add</Button>\n              </Grid>\n              {/* row */}\n              <Grid item xs={12}>\n                <TableContainer>\n                  <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell align=\"center\">Sr No</TableCell>\n                        <TableCell align=\"left\">Particulars</TableCell>\n                        <TableCell align=\"center\">Price</TableCell>\n                        <TableCell align=\"center\"></TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {this.state.invoice.items.map((item, index) => (\n                        <TableRow key={index}>\n                          <TableCell align=\"center\">{index + 1}</TableCell>\n                          <TableCell align=\"left\">{item.description}</TableCell>\n                          <TableCell align=\"center\">{item.price}</TableCell>\n                          <TableCell align=\"center\"><DeleteIcon onClick={ () =>\n                            {\n                              let invoice = {...this.state.invoice};\n                              invoice.items.splice(index, 1);\n                              this.setState({invoice})\n                            }\n                          }/></TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Grid>\n              <Grid item xs={8}> </Grid>\n              <Grid item xs={2}> <Typography>Total</Typography> </Grid>\n              <Grid item xs={2}> {\n                total\n              } </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n\n        \n      </CardContent>\n    </Card>);\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"App-logo\":\"App_App-logo__25k4o\",\"App-logo-spin\":\"App_App-logo-spin__1e7sv\",\"App-header\":\"App_App-header__xLkWl\",\"App-link\":\"App_App-link__3FsH9\"};"],"sourceRoot":""}